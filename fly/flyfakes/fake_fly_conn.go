// Code generated by counterfeiter. DO NOT EDIT.
package flyfakes

import (
	"sync"

	"github.com/concourse/concourse-pipeline-resource/fly"
)

type FakeFlyConn struct {
	LoginStub        func(url string, teamName string, username string, password string, insecure bool) ([]byte, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		url      string
		teamName string
		username string
		password string
		insecure bool
	}
	loginReturns struct {
		result1 []byte
		result2 error
	}
	loginReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetPipelineStub        func(pipelineName string) ([]byte, error)
	getPipelineMutex       sync.RWMutex
	getPipelineArgsForCall []struct {
		pipelineName string
	}
	getPipelineReturns struct {
		result1 []byte
		result2 error
	}
	getPipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SetPipelineStub        func(pipelineName string, configFilepath string, varsFilepaths []string) ([]byte, error)
	setPipelineMutex       sync.RWMutex
	setPipelineArgsForCall []struct {
		pipelineName   string
		configFilepath string
		varsFilepaths  []string
	}
	setPipelineReturns struct {
		result1 []byte
		result2 error
	}
	setPipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	DestroyPipelineStub        func(pipelineName string) ([]byte, error)
	destroyPipelineMutex       sync.RWMutex
	destroyPipelineArgsForCall []struct {
		pipelineName string
	}
	destroyPipelineReturns struct {
		result1 []byte
		result2 error
	}
	destroyPipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SyncStub        func() ([]byte, error)
	syncMutex       sync.RWMutex
	syncArgsForCall []struct{}
	syncReturns     struct {
		result1 []byte
		result2 error
	}
	syncReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlyConn) Login(url string, teamName string, username string, password string, insecure bool) ([]byte, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		url      string
		teamName string
		username string
		password string
		insecure bool
	}{url, teamName, username, password, insecure})
	fake.recordInvocation("Login", []interface{}{url, teamName, username, password, insecure})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(url, teamName, username, password, insecure)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loginReturns.result1, fake.loginReturns.result2
}

func (fake *FakeFlyConn) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeFlyConn) LoginArgsForCall(i int) (string, string, string, string, bool) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.loginArgsForCall[i].url, fake.loginArgsForCall[i].teamName, fake.loginArgsForCall[i].username, fake.loginArgsForCall[i].password, fake.loginArgsForCall[i].insecure
}

func (fake *FakeFlyConn) LoginReturns(result1 []byte, result2 error) {
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) LoginReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) GetPipeline(pipelineName string) ([]byte, error) {
	fake.getPipelineMutex.Lock()
	ret, specificReturn := fake.getPipelineReturnsOnCall[len(fake.getPipelineArgsForCall)]
	fake.getPipelineArgsForCall = append(fake.getPipelineArgsForCall, struct {
		pipelineName string
	}{pipelineName})
	fake.recordInvocation("GetPipeline", []interface{}{pipelineName})
	fake.getPipelineMutex.Unlock()
	if fake.GetPipelineStub != nil {
		return fake.GetPipelineStub(pipelineName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPipelineReturns.result1, fake.getPipelineReturns.result2
}

func (fake *FakeFlyConn) GetPipelineCallCount() int {
	fake.getPipelineMutex.RLock()
	defer fake.getPipelineMutex.RUnlock()
	return len(fake.getPipelineArgsForCall)
}

func (fake *FakeFlyConn) GetPipelineArgsForCall(i int) string {
	fake.getPipelineMutex.RLock()
	defer fake.getPipelineMutex.RUnlock()
	return fake.getPipelineArgsForCall[i].pipelineName
}

func (fake *FakeFlyConn) GetPipelineReturns(result1 []byte, result2 error) {
	fake.GetPipelineStub = nil
	fake.getPipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) GetPipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GetPipelineStub = nil
	if fake.getPipelineReturnsOnCall == nil {
		fake.getPipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getPipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) SetPipeline(pipelineName string, configFilepath string, varsFilepaths []string) ([]byte, error) {
	var varsFilepathsCopy []string
	if varsFilepaths != nil {
		varsFilepathsCopy = make([]string, len(varsFilepaths))
		copy(varsFilepathsCopy, varsFilepaths)
	}
	fake.setPipelineMutex.Lock()
	ret, specificReturn := fake.setPipelineReturnsOnCall[len(fake.setPipelineArgsForCall)]
	fake.setPipelineArgsForCall = append(fake.setPipelineArgsForCall, struct {
		pipelineName   string
		configFilepath string
		varsFilepaths  []string
	}{pipelineName, configFilepath, varsFilepathsCopy})
	fake.recordInvocation("SetPipeline", []interface{}{pipelineName, configFilepath, varsFilepathsCopy})
	fake.setPipelineMutex.Unlock()
	if fake.SetPipelineStub != nil {
		return fake.SetPipelineStub(pipelineName, configFilepath, varsFilepaths)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setPipelineReturns.result1, fake.setPipelineReturns.result2
}

func (fake *FakeFlyConn) SetPipelineCallCount() int {
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	return len(fake.setPipelineArgsForCall)
}

func (fake *FakeFlyConn) SetPipelineArgsForCall(i int) (string, string, []string) {
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	return fake.setPipelineArgsForCall[i].pipelineName, fake.setPipelineArgsForCall[i].configFilepath, fake.setPipelineArgsForCall[i].varsFilepaths
}

func (fake *FakeFlyConn) SetPipelineReturns(result1 []byte, result2 error) {
	fake.SetPipelineStub = nil
	fake.setPipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) SetPipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.SetPipelineStub = nil
	if fake.setPipelineReturnsOnCall == nil {
		fake.setPipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.setPipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) DestroyPipeline(pipelineName string) ([]byte, error) {
	fake.destroyPipelineMutex.Lock()
	ret, specificReturn := fake.destroyPipelineReturnsOnCall[len(fake.destroyPipelineArgsForCall)]
	fake.destroyPipelineArgsForCall = append(fake.destroyPipelineArgsForCall, struct {
		pipelineName string
	}{pipelineName})
	fake.recordInvocation("DestroyPipeline", []interface{}{pipelineName})
	fake.destroyPipelineMutex.Unlock()
	if fake.DestroyPipelineStub != nil {
		return fake.DestroyPipelineStub(pipelineName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.destroyPipelineReturns.result1, fake.destroyPipelineReturns.result2
}

func (fake *FakeFlyConn) DestroyPipelineCallCount() int {
	fake.destroyPipelineMutex.RLock()
	defer fake.destroyPipelineMutex.RUnlock()
	return len(fake.destroyPipelineArgsForCall)
}

func (fake *FakeFlyConn) DestroyPipelineArgsForCall(i int) string {
	fake.destroyPipelineMutex.RLock()
	defer fake.destroyPipelineMutex.RUnlock()
	return fake.destroyPipelineArgsForCall[i].pipelineName
}

func (fake *FakeFlyConn) DestroyPipelineReturns(result1 []byte, result2 error) {
	fake.DestroyPipelineStub = nil
	fake.destroyPipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) DestroyPipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.DestroyPipelineStub = nil
	if fake.destroyPipelineReturnsOnCall == nil {
		fake.destroyPipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.destroyPipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) Sync() ([]byte, error) {
	fake.syncMutex.Lock()
	ret, specificReturn := fake.syncReturnsOnCall[len(fake.syncArgsForCall)]
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct{}{})
	fake.recordInvocation("Sync", []interface{}{})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.syncReturns.result1, fake.syncReturns.result2
}

func (fake *FakeFlyConn) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeFlyConn) SyncReturns(result1 []byte, result2 error) {
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) SyncReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.SyncStub = nil
	if fake.syncReturnsOnCall == nil {
		fake.syncReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.syncReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlyConn) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.getPipelineMutex.RLock()
	defer fake.getPipelineMutex.RUnlock()
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	fake.destroyPipelineMutex.RLock()
	defer fake.destroyPipelineMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlyConn) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fly.FlyConn = new(FakeFlyConn)
